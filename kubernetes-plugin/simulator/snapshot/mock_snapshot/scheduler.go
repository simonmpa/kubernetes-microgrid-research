// Code generated by MockGen. DO NOT EDIT.
// Source: sigs.k8s.io/kube-scheduler-simulator/simulator/snapshot (interfaces: SchedulerService)
//
// Generated by this command:
//
//	mockgen -destination=./mock_snapshot/scheduler.go . SchedulerService
//

// Package mock_snapshot is a generated GoMock package.
package mock_snapshot

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	v1 "k8s.io/kube-scheduler/config/v1"
)

// MockSchedulerService is a mock of SchedulerService interface.
type MockSchedulerService struct {
	ctrl     *gomock.Controller
	recorder *MockSchedulerServiceMockRecorder
	isgomock struct{}
}

// MockSchedulerServiceMockRecorder is the mock recorder for MockSchedulerService.
type MockSchedulerServiceMockRecorder struct {
	mock *MockSchedulerService
}

// NewMockSchedulerService creates a new mock instance.
func NewMockSchedulerService(ctrl *gomock.Controller) *MockSchedulerService {
	mock := &MockSchedulerService{ctrl: ctrl}
	mock.recorder = &MockSchedulerServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSchedulerService) EXPECT() *MockSchedulerServiceMockRecorder {
	return m.recorder
}

// GetSchedulerConfig mocks base method.
func (m *MockSchedulerService) GetSchedulerConfig() (*v1.KubeSchedulerConfiguration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSchedulerConfig")
	ret0, _ := ret[0].(*v1.KubeSchedulerConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSchedulerConfig indicates an expected call of GetSchedulerConfig.
func (mr *MockSchedulerServiceMockRecorder) GetSchedulerConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSchedulerConfig", reflect.TypeOf((*MockSchedulerService)(nil).GetSchedulerConfig))
}

// RestartScheduler mocks base method.
func (m *MockSchedulerService) RestartScheduler(cfg *v1.KubeSchedulerConfiguration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestartScheduler", cfg)
	ret0, _ := ret[0].(error)
	return ret0
}

// RestartScheduler indicates an expected call of RestartScheduler.
func (mr *MockSchedulerServiceMockRecorder) RestartScheduler(cfg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestartScheduler", reflect.TypeOf((*MockSchedulerService)(nil).RestartScheduler), cfg)
}
