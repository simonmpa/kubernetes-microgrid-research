// Code generated by MockGen. DO NOT EDIT.
// Source: eventproxy.go
//
// Generated by this command:
//
//	mockgen -source=eventproxy.go -destination=./mock_eventproxy_test.go -package=resourcewatcher
//

// Package resourcewatcher is a generated GoMock package.
package resourcewatcher

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"

	streamwriter "sigs.k8s.io/kube-scheduler-simulator/simulator/resourcewatcher/streamwriter"
)

// MockeventProxyer is a mock of eventProxyer interface.
type MockeventProxyer struct {
	ctrl     *gomock.Controller
	recorder *MockeventProxyerMockRecorder
	isgomock struct{}
}

// MockeventProxyerMockRecorder is the mock recorder for MockeventProxyer.
type MockeventProxyerMockRecorder struct {
	mock *MockeventProxyer
}

// NewMockeventProxyer creates a new mock instance.
func NewMockeventProxyer(ctrl *gomock.Controller) *MockeventProxyer {
	mock := &MockeventProxyer{ctrl: ctrl}
	mock.recorder = &MockeventProxyerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockeventProxyer) EXPECT() *MockeventProxyerMockRecorder {
	return m.recorder
}

// lastResourceVersion mocks base method.
func (m *MockeventProxyer) lastResourceVersion() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "lastResourceVersion")
	ret0, _ := ret[0].(string)
	return ret0
}

// lastResourceVersion indicates an expected call of lastResourceVersion.
func (mr *MockeventProxyerMockRecorder) lastResourceVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "lastResourceVersion", reflect.TypeOf((*MockeventProxyer)(nil).lastResourceVersion))
}

// listAndHandleItems mocks base method.
func (m *MockeventProxyer) listAndHandleItems(lw cache.Lister) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "listAndHandleItems", lw)
	ret0, _ := ret[0].(error)
	return ret0
}

// listAndHandleItems indicates an expected call of listAndHandleItems.
func (mr *MockeventProxyerMockRecorder) listAndHandleItems(lw any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "listAndHandleItems", reflect.TypeOf((*MockeventProxyer)(nil).listAndHandleItems), lw)
}

// resourceKind mocks base method.
func (m *MockeventProxyer) resourceKind() streamwriter.ResourceKind {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "resourceKind")
	ret0, _ := ret[0].(streamwriter.ResourceKind)
	return ret0
}

// resourceKind indicates an expected call of resourceKind.
func (mr *MockeventProxyerMockRecorder) resourceKind() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "resourceKind", reflect.TypeOf((*MockeventProxyer)(nil).resourceKind))
}

// restClient mocks base method.
func (m *MockeventProxyer) restClient() cache.Getter {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "restClient")
	ret0, _ := ret[0].(cache.Getter)
	return ret0
}

// restClient indicates an expected call of restClient.
func (mr *MockeventProxyerMockRecorder) restClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "restClient", reflect.TypeOf((*MockeventProxyer)(nil).restClient))
}

// watchAndHandleEvent mocks base method.
func (m *MockeventProxyer) watchAndHandleEvent(watcher watch.Interface, stopCh <-chan struct{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "watchAndHandleEvent", watcher, stopCh)
}

// watchAndHandleEvent indicates an expected call of watchAndHandleEvent.
func (mr *MockeventProxyerMockRecorder) watchAndHandleEvent(watcher, stopCh any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "watchAndHandleEvent", reflect.TypeOf((*MockeventProxyer)(nil).watchAndHandleEvent), watcher, stopCh)
}
