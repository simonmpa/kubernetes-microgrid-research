// Code generated by MockGen. DO NOT EDIT.
// Source: sigs.k8s.io/kube-scheduler-simulator/simulator/oneshotimporter (interfaces: ReplicateService)
//
// Generated by this command:
//
//	mockgen -destination=./mock_oneshotimporter/replicate.go . ReplicateService
//

// Package mock_oneshotimporter is a generated GoMock package.
package mock_oneshotimporter

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	snapshot "sigs.k8s.io/kube-scheduler-simulator/simulator/snapshot"
)

// MockReplicateService is a mock of ReplicateService interface.
type MockReplicateService struct {
	ctrl     *gomock.Controller
	recorder *MockReplicateServiceMockRecorder
	isgomock struct{}
}

// MockReplicateServiceMockRecorder is the mock recorder for MockReplicateService.
type MockReplicateServiceMockRecorder struct {
	mock *MockReplicateService
}

// NewMockReplicateService creates a new mock instance.
func NewMockReplicateService(ctrl *gomock.Controller) *MockReplicateService {
	mock := &MockReplicateService{ctrl: ctrl}
	mock.recorder = &MockReplicateServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReplicateService) EXPECT() *MockReplicateServiceMockRecorder {
	return m.recorder
}

// IgnoreErr mocks base method.
func (m *MockReplicateService) IgnoreErr() snapshot.Option {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IgnoreErr")
	ret0, _ := ret[0].(snapshot.Option)
	return ret0
}

// IgnoreErr indicates an expected call of IgnoreErr.
func (mr *MockReplicateServiceMockRecorder) IgnoreErr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IgnoreErr", reflect.TypeOf((*MockReplicateService)(nil).IgnoreErr))
}

// IgnoreSchedulerConfiguration mocks base method.
func (m *MockReplicateService) IgnoreSchedulerConfiguration() snapshot.Option {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IgnoreSchedulerConfiguration")
	ret0, _ := ret[0].(snapshot.Option)
	return ret0
}

// IgnoreSchedulerConfiguration indicates an expected call of IgnoreSchedulerConfiguration.
func (mr *MockReplicateServiceMockRecorder) IgnoreSchedulerConfiguration() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IgnoreSchedulerConfiguration", reflect.TypeOf((*MockReplicateService)(nil).IgnoreSchedulerConfiguration))
}

// Load mocks base method.
func (m *MockReplicateService) Load(ctx context.Context, resources *snapshot.ResourcesForLoad, opts ...snapshot.Option) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, resources}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Load", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Load indicates an expected call of Load.
func (mr *MockReplicateServiceMockRecorder) Load(ctx, resources any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, resources}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Load", reflect.TypeOf((*MockReplicateService)(nil).Load), varargs...)
}

// Snap mocks base method.
func (m *MockReplicateService) Snap(ctx context.Context, labelSelector v1.LabelSelector, opts ...snapshot.Option) (*snapshot.ResourcesForSnap, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, labelSelector}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Snap", varargs...)
	ret0, _ := ret[0].(*snapshot.ResourcesForSnap)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Snap indicates an expected call of Snap.
func (mr *MockReplicateServiceMockRecorder) Snap(ctx, labelSelector any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, labelSelector}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Snap", reflect.TypeOf((*MockReplicateService)(nil).Snap), varargs...)
}
